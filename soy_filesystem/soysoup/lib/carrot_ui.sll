let carrot = ImportSLL("carrot.sll");

let WindowClass = class extends carrot.Window {
  load() {
    this.components = [];
    this.hovered = false;
    this.topbarComponent = new TopbarComponent();
    this.addComponent(this.topbarComponent);
    this.currentlyHoveredComponent = null;
  }
  addComponent(component) {
    component.setWindow(this);
    this.components.push(component);
  }
  removeComponent(component) {
    if (this.components.includes(component)) {
      removeItem(this.components, component);
    }
  }
  draw() {
    super.draw();
    this.drawComponents();
  }
  onWindowResize() {
    this.sendWindowResizeToComponents();
  }
  onMousedown(event) {
    this.sendMousedownToHoveredComponent(event);
  }
  onMouseup(event) {
    this.sendMouseupToHoveredComponent(event);
  }
  onMousemove(event) {
    this.sendMousemoveToHoveredComponent(event);
    this.sendHoverStateChangeToHoveredComponent(event);
  }
  onStartHover(event) {
    this.hovered = true;
  }
  onStopHover(event) {
    this.hovered = false;
    if (this.currentlyHoveredComponent) {
      this.currentlyHoveredComponent.onStopHover(event);
      this.currentlyHoveredComponent = null;
    }
  }
  getAbsolutePosition() {
    return [this.x, this.y];
  }
  sendWindowResizeToComponents() {
    for (let component of this.components) {
      component.onWindowResize();
    }
  }
  sendMouseupToHoveredComponent(event) {
    let component = this.getComponentAt(event.clientX, event.clientY);
    if (component === null) {
      return false;
    }
    component.onMouseup(event);
  }
  sendMousedownToHoveredComponent(event) {
    let component = this.getComponentAt(event.clientX, event.clientY);
    if (component === null) {
      return false;
    }
    component.onMousedown(event);
  }
  sendMousemoveToHoveredComponent(event) {
    let component = this.getComponentAt(event.clientX, event.clientY);
    if (component === null) {
      return false;
    }
    component.onMousemove(event);
  }
  sendHoverStateChangeToHoveredComponent(event) {
    let component = this.getComponentAt(event.clientX, event.clientY);
    if (this.currentlyHoveredComponent == component) {
      return;
    }
    if (this.currentlyHoveredComponent) {
      this.currentlyHoveredComponent.onStopHover(event);
    }
    this.currentlyHoveredComponent = component;
    if (component) {
      component.onStartHover(event);
    }
  }
  getComponentAt(x, y) {
    for (let component of this.components) {
      let [componentX, componentY] = component.getAbsolutePosition();
      if (x >= componentX && x < componentX + component.width) {
        if (y >= componentY && y < componentY + component.height) {
          return component;
        }
      }
    }
    return null;
  }
  drawComponents() {
    for (let i = this.components.length; i--; i == 0) {
      let component = this.components[i];
      component.draw();
      try {
        this.ctx.drawImage(
          component.canvas,
          component.x + component.drawOffsetX,
          component.y + component.drawOffsetY
        );
      } catch {}
    }
  }
};

let Component = class extends WindowClass {
  constructor(x, y, width, height) {
    super(undefined, undefined, width, height, false, true);
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
    this.window = undefined;

    this.textColor = "#000";
    this.color = carrot.windowBackgroundColor;
    this.borderColor = carrot.windowBorderColor;

    this.setBorderWidth(carrot.windowBorderWidth);

    this.currentlyHoveredComponent = null;
    this.components = [];
    this.load();
  }
  addComponent(component) {
    component.setParent(this);
    this.components.push(component);
  }
  setWindow(window) {
    if (this.window == this.parent) {
      this.window = window;
      this.setParent(window);
    } else {
      this.window = window;
    }
    for (let component of this.components) {
      component.setWindow(window);
    }
    this.onWindowResize();
  }
  setParent(parent) {
    this.parent = parent;
  }
  setSize(width, height) {
    this.width = width;
    this.height = height;
    this.reloadCanvas();
  }
  reloadCanvas() {
    this.canvas.width = this.width + this.borderWidth * 2;
    this.canvas.height = this.height + this.borderWidth * 2;
  }
  setBorderWidth(borderWidth) {
    this.borderWidth = borderWidth;
    this.drawOffsetX = -this.borderWidth;
    this.drawOffsetY = -this.borderWidth;
    this.reloadCanvas();
  }
  getAbsolutePosition() {
    let x = this.x;
    let y = this.y;
    let [parentX, parentY] = this.parent.getAbsolutePosition();
    x += parentX;
    y += parentY;
    return [x, y];
  }
  load() {}
  draw() {
    drawRect(
      this.ctx,
      0,
      0,
      this.width + this.borderWidth * 2,
      this.height + this.borderWidth * 2,
      this.borderColor
    );
    drawRect(
      this.ctx,
      this.borderWidth,
      this.borderWidth,
      this.width,
      this.height,
      this.color
    );

    this.drawComponents();
  }
};

let ButtonComponent = class extends Component {
  constructor(x, y, text, width = undefined, height = undefined) {
    let autoSized = true;
    if (width !== undefined || height !== undefined) {
      autoSized = false;
    }
    super(x, y, width, height);
    this.padding = 8;
    this.autoSized = autoSized;
    this.hoverColor = carrot.highlightColor;
    this.clicking = false;
    this.movedOff = false;
    this.setText(text);
  }
  setText(text) {
    this.text = text;
    if (this.autoSized) {
      this.resizeToFitText();
    }
  }
  resizeToFitText() {
    let lines = this.text.split("\n");
    let longest = 0;
    for (let line of lines) {
      let width = getTextWidth(this.ctx, line);
      if (width > longest) {
        longest = width;
      }
    }
    let width = longest + this.padding * 2;
    let height = lines.length * fontSize + this.padding * 2;
    this.setSize(width, height);
  }
  onMousedown() {
    this.clicking = true;
  }
  onStopHover(event) {
    super.onStopHover(event);
    this.movedOff = true;
  }
  onStartHover(event) {
    super.onStartHover(event);
    this.movedOff = false;
  }
  onClick(event) {}
  onMouseup(event) {
    if (this.clicking && !this.movedOff) {
      this.clicking = false;
      this.movedOff = false;
      this.onClick(event);
    }
  }
  draw() {
    super.draw();
    if (this.hovered) {
      drawRect(
        this.ctx,
        this.borderWidth,
        this.borderWidth,
        this.width,
        this.height,
        this.hoverColor
      );
    }
    drawAnsiText(
      this.ctx,
      this.padding,
      fontSize + this.padding,
      this.text,
      this.textColor
    );
  }
};

let TopbarComponent = class extends Component {
  constructor() {
    super(0, 0, 100, 100);
    this.closeButton = new ButtonComponent(50, 0, "X");
    this.closeButton.onClick = function () {
      this.window.parent.quit();
    };
    this.draggingWindow = false;
    this.draggingOffset = { x: 0, y: 0 };
    this.addComponent(this.closeButton);
  }
  onMousedown(event) {
    let result = this.sendMousedownToHoveredComponent(event);
    // if other component was interacted with, start dragging window
    if (!result) {
      this.draggingWindow = true;
      this.draggingOffset = {
        x: this.window.x - event.clientX,
        y: this.window.y - event.clientY,
      };
    }
  }
  onMouseup(event) {
    let result = this.sendMousedownToHoveredComponent(event);
    // if other component was interacted with, stop dragging window
    if (!result) {
      if (this.draggingWindow) {
        this.draggingWindow = false;
      }
    }
  }
  onMousemove(event) {
    super.onMousemove(event);
  }
  onWindowResize() {
    this.setSize(this.window.width, carrot.topbarHeight);
    this.closeButton.x =
      this.width - this.closeButton.width + this.closeButton.borderWidth;
  }
  load() {
    super.load();
    this.color = carrot.topbarBackgroundColor;
  }
  draw() {
    if (this.draggingWindow) {
      this.window.x = this.draggingOffset.x + mouse.x;
      this.window.y = this.draggingOffset.y + mouse.y;
    }
    super.draw();
    drawAnsiText(
      this.ctx,
      4,
      fontSize,
      this.window.title,
      carrot.windowTitleTextColor
    );
  }
};

let ConsoleHostComponent = class extends Component {
  load() {
    super.load();
    this.text = "";
  }
  draw() {
    super.draw();

    drawRect(
      this.ctx,
      0,
      0,
      this.ctx.canvas.width,
      this.ctx.canvas.height,
      "#000"
    );
    let lines = this.text.split("\n");
    let maxLines = this.calcMaxLines() - 1;
    let skipUntil = null;
    if (lines.length >= maxLines) {
      skipUntil = lines.length - maxLines;
    }
    let text = "";
    for (let i = 0; i < lines.length; i++) {
      if (!(skipUntil !== null && i < skipUntil)) {
        let line = lines[i];
        text += line + "\n";
      }
    }
    drawAnsiText(this.ctx, 0, fontSize, text);
  }
  calcMaxLines() {
    return Math.floor(this.canvas.height / fontSize);
  }
};

let ConsoleHostWindow = class extends WindowClass {
  load() {
    super.load();
    let pathSegments = this.parent.filepath.split("/");
    this.title = pathSegments[pathSegments.length - 1].split(".")[0];
    this.consoleHostComponent = new ConsoleHostComponent(
      0,
      carrot.topbarHeight,
      this.width,
      this.height - carrot.topbarHeight
    );
    this.addComponent(this.consoleHostComponent);
  }
  draw() {
    this.consoleHostComponent.text = this.parent.outputShell.text;
    super.draw();
  }
};

let SLLSource = {
  Component: Component,
  BaseComponents: {
    Button: ButtonComponent,
    Topbar: TopbarComponent,
  },
  Window: WindowClass,
  ConsoleHostWindow: ConsoleHostWindow,
};
