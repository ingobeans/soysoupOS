systemFiles = '{"type": "directory", "content": {"soysoup": {"type": "directory", "content": {"bar.soup": {"type": "file", "content": "class ProgramSource extends Program {\\n  showProgressBar(percent, outputShell) {\\n    outputShell.text =\\n      \\"[\\" + \\"#\\".repeat(percent) + \\"-\\".repeat(100 - percent) + \\"]\\";\\n    outputShell.flush();\\n  }\\n  load(args, outputShell) {\\n    this.showProgressBar(10, outputShell);\\n    var self = this;\\n    for (let percent = 0; percent <= 101; percent++) {\\n      setTimeout(function () {\\n        if (percent == 101) {\\n          outputShell.println(\\"finished the important task!\\");\\n          return;\\n        }\\n        self.showProgressBar(percent, outputShell);\\n      }, 40 * percent);\\n    }\\n  }\\n}\\n"}, "cat.soup": {"type": "file", "content": "class ProgramSource extends Program {\\n  load(args, outputShell) {\\n    if (fileSystem.pathExists(args) == false || !fileSystem.isFile(args)) {\\n      outputShell.println(\\"error: path doesn\'t exist or is not a file\\");\\n      return;\\n    }\\n    outputShell.println(fileSystem.readFile(args));\\n  }\\n}\\n"}, "cls.soup": {"type": "file", "content": "class ProgramSource extends Program {\\n  load(args, outputShell) {\\n    outputShell.text = \\"\\";\\n    outputShell.flush();\\n  }\\n}\\n"}, "echo.soup": {"type": "file", "content": "class ProgramSource extends Program {\\n  load(args, outputShell) {\\n    outputShell.println(args);\\n  }\\n}\\n"}, "help.soup": {"type": "file", "content": "class ProgramSource extends Program {\\n  load(args, outputShell) {\\n    var helpMessage = `cat - read contents of file\\necho - print a string to shell\\nls - list contents of directory\\nreload - reset file system\\ncls - clears the terminal`;\\n    outputShell.println(helpMessage);\\n  }\\n}\\n"}, "ls.soup": {"type": "file", "content": "class ProgramSource extends Program {\\n  load(args, outputShell) {\\n    if (\\n      fileSystem.pathExists(args) == false ||\\n      fileSystem.isFile(args) == true\\n    ) {\\n      outputShell.println(\\"error: path doesn\'t exist or is not a directory\\");\\n      return;\\n    }\\n    outputShell.println(fileSystem.readDirectory(args).join(\\"\\\\n\\"));\\n  }\\n}\\n"}, "reload.soup": {"type": "file", "content": "class ProgramSource extends Program {\\n  load(args, outputShell) {\\n    fileSystem.loadFromString(systemFiles);\\n  }\\n}\\n"}}}, "home": {"type": "directory", "content": {"downloads": {"type": "directory", "content": {}}, "documents": {"type": "directory", "content": {}}, "programs": {"type": "directory", "content": {}}}}}}'